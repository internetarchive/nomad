# NOTE: keep in mind this file is _included_ by _other_ repos, and thus the env var names
# are not _always_ related to _this_ repo ;-)

# A GitLab group (ideally) or project will need to set [Settings] [CI/CD] [Variables]
#   NOMAD_ADDR
#   NOMAD_TOKEN
# to whatever your Nomad cluster was setup to.


# NOTE: very first pipeline, the [build] below will make sure this is created
image: registry.gitlab.com/internetarchive/nomad/master


stages:
  - build
  - test
  - deploy
  - cleanup


include:
  # GitLab Auto DevOps' stock CI/CD [build] phase:
  - remote: 'https://gitlab.com/gitlab-org/gitlab-foss/-/raw/master/lib/gitlab/ci/templates/Jobs/Build.gitlab-ci.yml'
  # @see https://gitlab.com/gitlab-org/cluster-integration/auto-build-image/blob/master/src/build.sh



build:
  stage: build
  before_script:
    - |
      AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS=""
      for k in $(env |egrep ^NOMAD_SECRET_ |cut -f1 -d=); do
        v="${!k}"
        k2=$(echo $k | sed -e s/^NOMAD_SECRET_//)
        AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS="$AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS --build-arg $k2='$v'"
      done
      export AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS


.nomad-vars:
  before_script:
    # make nice hostname, eg:
    #   services-timemachine.x.archive.org
    #   ia-petabox-webdev-3939-fix-things.x.archive.org
    # and a unique slug that factors in group, project, and branch (when not master)
    - export BRANCH_PART=""
    - if [ "$CI_COMMIT_REF_SLUG" != "master" ]; then export BRANCH_PART="-${CI_COMMIT_REF_SLUG}"; fi
    - export NOMAD_VAR_SLUG=$(echo "${CI_PROJECT_PATH_SLUG}${BRANCH_PART}" |cut -b1-63)
    - export NOMAD_VAR_HOSTNAME="${NOMAD_VAR_SLUG}.${KUBE_INGRESS_BASE_DOMAIN}"
    - if [ "$NOMAD_VAR_HOSTNAMES" = "" ]; then export NOMAD_VAR_HOSTNAMES='["'$NOMAD_VAR_HOSTNAME'"]'; fi


deploy:
  extends: .nomad-vars
  stage: deploy
  script:
    - echo using nomad cluster $NOMAD_ADDR
    - echo deploying to https://$NOMAD_VAR_HOSTNAME

    # You can have your own/custom `project.nomad` in the top of your repo - or we'll just use
    # this fully parameterized nice generic 'house style' project
    - if [ ! -e project.nomad ];then wget -q https://gitlab.com/internetarchive/nomad/-/raw/master/project.nomad; fi

    - cp project.nomad project.hcl
    # Do the one current substitution nomad v1.0.3 can't do now (apparently a bug)
    - sed -i "s/NOMAD_VAR_SLUG/$NOMAD_VAR_SLUG/" project.hcl
    # write current env vars starting with "CI_" to a JSON env var file
    - node -e 'console.log(JSON.stringify(Object.fromEntries(Object.entries(process.env).filter(([k, v]) => k.startsWith("CI_")))))' >| /tmp/env.json

    - nomad validate -var-file=/tmp/env.json project.hcl
    - nomad plan     -var-file=/tmp/env.json project.hcl 2>&1 |sed 's/\(password[^ \t]*[ \t]*\).*/\1 ... /' || echo
    - nomad run      -var-file=/tmp/env.json project.hcl

    - rm /tmp/env.json

    - echo deployed to https://$NOMAD_VAR_HOSTNAME

  environment:
    name: $CI_COMMIT_REF_SLUG
    url: https://$NOMAD_VAR_HOSTNAME
    on_stop: stop_review
  rules:
    - if: '$NOMAD_VAR_NO_DEPLOY'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'


stop_review:
  # See:
  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Deploy.gitlab-ci.yml
  extends: .nomad-vars
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - nomad stop $NOMAD_VAR_SLUG
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
  dependencies: []
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$NOMAD_VAR_NO_DEPLOY'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
      when: manual
